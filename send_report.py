import os
import pandas as pd
import smtplib
import base64
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from report_generator import *

def get_authority_contacts(csv_path="data/autorite.csv"):
    """Charge la liste des autorit√©s depuis un CSV."""
    df = pd.read_csv(csv_path)
    df = df.dropna(subset=["email"])
    return df[["nom", "email"]].to_dict(orient="records")

def send_email_smtp(sender, password, to, subject, body_text, file_path=None):
    """Envoie un mail via SMTP Gmail avec option pi√®ce jointe."""
    msg = MIMEMultipart()
    msg["From"] = sender
    msg["To"] = to
    msg["Subject"] = subject

    # Corps du message
    msg.attach(MIMEText(body_text, "plain"))

    # Pi√®ce jointe
    if file_path and os.path.exists(file_path):
        with open(file_path, "rb") as f:
            part = MIMEApplication(f.read(), Name=os.path.basename(file_path))
        part["Content-Disposition"] = f'attachment; filename="{os.path.basename(file_path)}"'
        msg.attach(part)

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender, password)
            server.sendmail(sender, to, msg.as_string())
        print(f"üì© Email envoy√© √† {to}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur SMTP lors de l'envoi √† {to}: {e}")
        return False

def envoyer_rapport_aux_autorites(location_id, sender, password):
    """G√©n√®re et envoie un rapport personnalis√© √† chaque autorit√©."""
    contacts_autorites = get_authority_contacts()
    if not contacts_autorites:
        print("‚ùå Aucun contact trouv√© dans autorite.csv")
        return False

    success_count = 0
    total_count = len(contacts_autorites)

    for contact in contacts_autorites:
        nom = contact["nom"]
        email = contact["email"]

        # G√©n√©ration du rapport PDF
        pdf_path = test_professional_report()

        subject = "Rapport Qualit√© de l'air - √âcole"
        body = (
            f"Bonjour {nom},\n\n"
            "Voici votre rapport personnalis√© sur la qualit√© de l'air dans votre zone.\n"
            "Il contient :\n"
            " - Les mesures actuelles\n"
            " - Les pr√©visions pour demain et la semaine prochaine\n"
            " - Les recommandations adapt√©es √† votre niveau de priorit√©\n\n"
            "Nous comptons sur votre engagement pour sensibiliser et agir.\n\n"
            "Cordialement,\n"
            "L'√©quipe Respire"
        )

        if send_email_smtp(sender, password, email, subject, body, pdf_path):
            success_count += 1

    print(f"‚úÖ Rapports envoy√©s avec succ√®s : {success_count}/{total_count}")
    return success_count == total_count

def main():
    """Point d'entr√©e principal."""
    sender = os.getenv("SENDER_EMAIL", "houngbo.calixte.r@gmail.com")
    password = os.getenv("GMAIL_APP_PASSWORD")  # ‚ö†Ô∏è √† d√©finir dans GitHub Secrets
    location_id = os.getenv("LOCATION_ID", "164928")

    if not password:
        raise ValueError("‚ùå Variable d'environnement GMAIL_APP_PASSWORD manquante")

    success = envoyer_rapport_aux_autorites(location_id, sender, password)

    if success:
        print("üéâ Tous les rapports envoy√©s avec succ√®s!")
    else:
        print("‚ö†Ô∏è Certains rapports n'ont pas pu √™tre envoy√©s.")

if __name__ == "__main__":
    main()
